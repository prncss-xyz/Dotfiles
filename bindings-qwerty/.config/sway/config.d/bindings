# use wev to find keys' names

# Logo key. Use mod0 for alt.
set $mod Mod4
# Home row direction keys, like vim
set $left l
set $down k
set $up j
set $right semicolon

# Drag floating windows by holding down $mod and left mouse button.
# Resize them with right mouse button + $mod.
# Despite the name, also works for non-floating windows.
# Change normal to inverse to use left mouse button for resizing and right
# mouse button for dragging.
floating_modifier $mod normal

bindsym $mod+b mode audio
bindsym $mod+shift+b mode lumino
bindsym $mod+e exec $terminal -e nvim_sessions
bindsym $mod+shift+e exec $terminal -e nvim_nonono
bindsym $mod+g mode launch
bindsym $mod+h exec $terminal "--class=launcher -e nvim Dotfiles/bindings-qwerty/.config/sway/config.d/bindings"
bindsym $mod+n exec makoctl dismiss
bindsym $mod+shift+n exec makoctl dismiss --all
bindsym $mod+m fullscreen
bindsym $mod+p workspace back_and_forth
bindsym $mod+q kill
bindsym $mod+r mode "resize"
bindsym $mod+t exec echo next terminal > /tmp/sway-mega-hotkeys
bindsym $mod+shift+t exec echo previous terminal > /tmp/sway-mega-hotkeys
bindsym $mod+u exec echo next default > /tmp/sway-mega-hotkeys
bindsym $mod+shift+u exec echo previous default > /tmp/sway-mega-hotkeys
bindsym $mod+v exec echo back > /tmp/sway-mega-hotkeys
bindsym $mod+w mode workspace
bindsym $mod+x exec echo last > /tmp/sway-mega-hotkeys
bindsym $mod+y exec echo next browser > /tmp/sway-mega-hotkeys
bindsym $mod+shift+y exec echo previous browser > /tmp/sway-mega-hotkeys
bindsym $mod+z mode mouse3

bindsym $mod+a workspace number 0, mode default
bindsym $mod+shift+a move container to workspace number 0 
bindsym $mod+s workspace number 1, mode default
bindsym $mod+shift+s move container to workspace number 1 
bindsym $mod+d workspace number 2, mode default
bindsym $mod+shift+d move container to workspace number 2 
bindsym $mod+f workspace number 3, mode default
bindsym $mod+shift+f move container to workspace number 3 

bindsym $mod+return [title="^scratchpad$"] scratchpad show
bindsym $mod+space focus mode_toggle
bindsym $mod+shift+space floating toggle
bindsym $mod+minus scratchpad show
bindsym $mod+shift+minus move scratchpad
bindsym $mod+ctrl+g mode "$mode_gaps"
bindsym $mod+ctrl+period mark __mark
bindsym $mod+period [con_mark=__mark] move to workspace current; [con_mark=__mark] focus
bindsym $mod+shift+period [con_mark=__mark] move to workspace next

bindsym XF86MonBrightnessUp exec brightnessctl set 2%+ | sed -En 's/.*\(([0-9]+)%\).*/\1/p' > $WOBSOCK
bindsym XF86MonBrightnessDown exec brightnessctl set 2%- | sed -En 's/.*\(([0-9]+)%\).*/\1/p' > $WOBSOCK
bindsym XF86AudioPlay exec playerctl --player playerctld play-pause
bindsym XF86AudioNext exec playerctl --player playerctld next
bindsym XF86AudioPrev exec playerctl --player playerctld previous
bindsym XF86AudioMute exec pamixer --toggle-mute && ( pamixer --get-mute && echo 0 > $WOBSOCK ) || pamixer --get-volume > $WOBSOCK
bindsym XF86AudioRaiseVolume exec pamixer -ui 2 && pamixer --get-volume > $WOBSOCK
bindsym XF86AudioLowerVolume exec pamixer -ud 2 && pamixer --get-volume > $WOBSOCK
bindsym XF86AudioStop exec playerctl --player playerctld stop

bindsym $mod+ctrl+r reload
bindsym $mod+ctrl+e exit
bindsym $mod+ctrl+l exec "swaylock"
bindsym ctrl+alt+delete exec "reboot"
bindsym $mod+ctrl+backspace exec "reboot"
bindsym $mod+ctrl+p exec "poweroff"

bindsym $mod+$left focus left
bindsym $mod+$down focus down
bindsym $mod+$up focus up
bindsym $mod+$right focus right
bindsym $mod+shift+$left move left, mode default
bindsym $mod+shift+$down move down, mode default
bindsym $mod+shift+$up move up, mode default
bindsym $mod+shift+$right move right, mode default

mode launch {
  bindsym c exec "clipman pick -t rofi", mode default
  bindsym d exec "$terminal --class=launcher -e fdocu", mode default
  bindsym shift+d exec "$terminal --class=launcher -e fdocu \*", mode default
  bindsym e exec "$terminal -e nvim_sessions", mode default
  bindsym shift+e exec "$terminal -e nvim_nonono", mode default
  bindsym g exec "$terminal -e nvim_ghost", mode default
  bindsym h exec "$terminal --class=launcher -e fman", mode default
  bindsym k exec "$terminal --class=launcher -e fkill", mode default
  bindsym m exec "$terminal -e nvim_codi_mathjs", mode default
  bindsym p exec "rofi-pass", mode default
  bindsym s exec "rofi -show ssh", mode default
  bindsym t exec "new_term", mode default
  bindsym y exec "$terminal --class=launcher -e fbookmark", mode default
  bindsym shift+y exec "$terminal -e nvim Personal/bookmarks.csv", mode default
  bindsym x exec "new_term xplr", mode default

  bindsym ctrl+c mode default
  bindsym return mode default
}

# TODO rename workspace number 0 to q
mode workspace {
  bindsym q workspace number 0, mode default
  bindsym w workspace number 1, mode default
  bindsym e workspace number 2, mode default
  bindsym r workspace number 3, mode default

  # redundant
  bindsym a workspace number 0, mode default
  bindsym s workspace number 1, mode default
  bindsym d workspace number 2, mode default
  bindsym f workspace number 3, mode default

  bindsym shift+q move container to workspace number 0
  bindsym shift+w move container to workspace number 1
  bindsym shift+e move container to workspace number 2 
  bindsym shift+r move container to workspace number 3 

  # redundant
  bindsym shift+a move container to workspace number 0 
  bindsym shift+s move container to workspace number 1 
  bindsym shift+d move container to workspace number 2 
  bindsym shift+f move container to workspace number 3 

  bindsym h toggle split, mode default
  bindsym j layout stacking, mode default
  bindsym k layout tabbed, mode default
  bindsym l splitv, mode default
  bindsym shift+l layout splitv, mode default
  bindsym semicolon splith, mode default
  bindsym shift+semicolon splith, mode default

  # redundant
  bindsym i workspace prev
  bindsym shift+i move container to workspace prev, workspace prev
  bindsym o workspace next
  bindsym shift+o move container to workspace next, workspace next

  bindsym ctrl+c mode default
  bindsym return mode default
}

mode audio {
  bindsym space exec playerctl --player playerctld play-pause; mode default
  bindsym $left exec playerctl --player playerctld next; mode default
  bindsym $right exec playerctl --player playerctld previous; mode default
  # bindsym m exec pactl set-sink-mute @DEFAULT_SINK@ toggle; mode default
  # bindsym $up exec pactl set-sink-volume @DEFAULT_SINK@ +4% 
  # bindsym $down exec pactl set-sink-volume @DEFAULT_SINK@ -4%
  # bindsym shift+$up exec pactl set-sink-volume @DEFAULT_SINK@ +12%
  # bindsym shift+$down exec pactl set-sink-volume @DEFAULT_SINK@ -12%
  bindsym m exec pamixer --toggle-mute && ( pamixer --get-mute && echo 0 > $WOBSOCK ) || pamixer --get-volume > $WOBSOCK
  bindsym $up exec pamixer -ui 2 && pamixer --get-volume > $WOBSOCK
  bindsym $down exec pamixer -ud 2 && pamixer --get-volume > $WOBSOCK
  bindsym shift+$up exec pamixer -ui 12 && pamixer --get-volume > $WOBSOCK
  bindsym shift+$down exec pamixer -ud 12 && pamixer --get-volume > $WOBSOCK
  bindsym ctrl+c mode default
  bindsym return mode default
}

set $speed1 5
set $speed2 10
set $speed3 25
mode mouse1 {
  bindsym 2 mode mouse2
  bindsym 3 mode mouse3
  bindsym $left seat - cursor move -$speed1 0
  bindsym $right seat - cursor move +$speed1 0
  bindsym $up seat - cursor move 0 -$speed1
  bindsym $down seat - cursor move 0 +$speed1
  bindsym f exec ydotool click left
  bindsym d exec ydotool click right
  bindsym s exec ydotool click middle
  bindsym ctrl+c mode default
  bindsym return mode default
}
mode mouse2 {
  bindsym 1 mode mouse1
  bindsym 3 mode mouse3
  bindsym $left seat - cursor move -$speed2 0
  bindsym $right seat - cursor move +$speed2 0
  bindsym $up seat - cursor move 0 -$speed2
  bindsym $down seat - cursor move 0 +$speed2
  bindsym f exec ydotool click left
  bindsym d exec ydotool click right
  bindsym s exec ydotool click middle
  bindsym ctrl+c mode default
  bindsym return mode default
}
mode mouse3 {
  bindsym 1 mode mouse1
  bindsym 2 mode mouse2
  bindsym $left seat - cursor move -$speed3 0
  bindsym $right seat - cursor move +$speed3 0
  bindsym $up seat - cursor move 0 -$speed3
  bindsym $down seat - cursor move 0 +$speed3
  bindsym f exec ydotool click left
  bindsym d exec ydotool click right
  bindsym s exec ydotool click middle
  bindsym ctrl+c mode default
  bindsym return mode default
}

mode lumino {
  bindsym $up exec brightnessctl set 2%+ | sed -En 's/.*\(([0-9]+)%\).*/\1/p' > $WOBSOCK
  bindsym $down exec brightnessctl set 2%- | sed -En 's/.*\(([0-9]+)%\).*/\1/p' > $WOBSOCK
  bindsym shift+$up exec brightnessctl set 12%+ | sed -En 's/.*\(([0-9]+)%\).*/\1/p' > $WOBSOCK
  bindsym shift+$down exec brightnessctl set 12%- | sed -En 's/.*\(([0-9]+)%\).*/\1/p' > $WOBSOCK
  bindsym ctrl+c mode default
  bindsym return mode default
}

mode resize {
  # left will shrink the containers width
  # right will grow the containers width
  # up will shrink the containers height
  # down will grow the containers height
  bindsym $left resize shrink width 10px
  bindsym $down resize grow height 10px
  bindsym $up resize shrink height 10px
  bindsym $right resize grow width 10px

  # Ditto, with arrow keys
  bindsym left resize shrink width 10px
  bindsym down resize grow height 10px
  bindsym up resize shrink height 10px
  bindsym right resize grow width 10px

  # return to default mode
  bindsym return mode "default"
  bindsym ctrl+c mode default
}

# Gaps tweaking
# Press $mod+shift+g to enter the gap mode. Choose o or i for modifying outer/inner gaps. Press one of + / - (in-/decrement for current workspace) or 0 (remove gaps for current workspace). If you also press Shift with these keys, the change will be global for all workspaces.
set $mode_gaps Gaps: (o) outer, (i) inner
set $mode_gaps_outer Outer Gaps: k|j|0 (local), shift + k|j|0 (global)
set $mode_gaps_inner Inner Gaps: k|j|0 (local), shift + k|j|0 (global)

mode "$mode_gaps" {
  bindsym o      mode "$mode_gaps_outer"
  bindsym i      mode "$mode_gaps_inner"
  bindsym return mode default
  bindsym ctrl+c mode default
}

mode "$mode_gaps_inner" {
  bindsym $up   gaps inner current plus 5
  bindsym $down gaps inner current minus 5
  bindsym 0     gaps inner current set 0; mode default

  bindsym shift+$up   gaps inner all plus 5
  bindsym shift+$down gaps inner all minus 5
  bindsym shift+0     gaps inner all set 0; mode default

  bindsym return mode default
  bindsym ctrl+c mode default
}

mode "$mode_gaps_outer" {
  bindsym $up   gaps outer current plus 5
  bindsym $down gaps outer current minus 5
  bindsym 0     gaps outer current set 0; mode default

  bindsym shift+$up   gaps outer all plus 5
  bindsym shift+$down gaps outer all minus 5
  bindsym shift+0     gaps outer all set 0; mode default

  bindsym return mode default
  bindsym ctrl+c mode default
}
