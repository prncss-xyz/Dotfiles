{
  "local assignment": {
    "prefix": "local assignment",
    "body": ["local ${1:name} = ${0:0}"],
    "description": "create a variable"
  },
  "local require": {
    "prefix": "local require",
    "body": ["local ${1:name} = require '${2:module}'"],
    "description": "require module as a variable"
  },
  "class": {
    "prefix": "class",
    "body": [
      "local ${1:name} = {}",
      "",
      "$1.new = function($2)",
      "\tlocal o = {$3}",
      "\t${4: -- block}",
      "\treturn o",
      "end",
      ""
    ],
    "description": "Create a class"
  },
  "repeat until": {
    "prefix": "repeat until",
    "body": ["repeat",  "\t${1: -- block}", "until ${2: false}"]
  },
  "for": {
    "prefix": "for ",
    "body": ["for ${2:_} in ${1:iterator} do", "\t${3: -- block}", "end"]
  },
  "for c": {
    "prefix": "for c",
    "body": ["for ${1:i} = ${2:1}, ${3:10} do", "\t${4: -- block}", "end"],
    "description": "for loop range"
  },
  "for pairs": {
    "prefix": "for pairs",
    "body": [
      "for ${1:k}, ${2:v} in pairs(${3:table}) do",
      "\t${4: block}",
      "end"
    ]
  },
  "for ipairs": {
    "prefix": "for ipairs",
    "body": [
      "for ${1:i}, ${2:v} in ipairs(${3:array}) do",
      "\t{$4: -- block}",
      "end"
    ]
  },
  "for line": {
    "prefix": "for line",
    "body": [
      "f = io.open(${1:'${2:filename}'}, '${3:r}')\n",
      "while true do",
      "\tline = f:read()",
      "\tif line == nil then break end\n",
      "\t${4:-- block}",
      "end"
    ],
    "description": "read file line by line"
  },
  "test": {
    "prefix": "test",
    "body": [
      "describe('${1:description}', function()",
      "\tit('${2:description}', function()",
      "\t\t${3:-- assertions}",
      "\tend)",
      "end)"
    ]
  },
  "test, describe": {
    "prefix": "describe",
    "body": [
      "describe('${1:description}', function()",
      "\t${2:-- tests}",
      "end)"
    ]
  },
  "test, it": {
    "prefix": "it",
    "body": ["it('${1:description}', function()", "\t${2:-- test}", "end)"]
  },
  "test, same": {
    "prefix": "same",
    "body": ["assert.are.same(${1:expected}, ${2:passed})"]
  }
}
